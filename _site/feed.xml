<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luke Griffith</title>
    <description>Luke&#39;s place to talk about work and studies.
</description>
    <link>http://www.lukegriffith.co.uk/</link>
    <atom:link href="http://www.lukegriffith.co.uk/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 26 Jun 2017 22:01:59 +0100</pubDate>
    <lastBuildDate>Mon, 26 Jun 2017 22:01:59 +0100</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Custom function and property attributes.</title>
        <description>&lt;h1 id=&quot;why-do-you-want-this&quot;&gt;Why do you want this?&lt;/h1&gt;
&lt;p&gt;These decorations can be added to powershell elements to provide more information via reflection to outside frameworks, allowing for more modular and extensible module design.&lt;/p&gt;

&lt;h1 id=&quot;property-attributes&quot;&gt;Property attributes&lt;/h1&gt;
&lt;p&gt;These can be applied to properties of classes to give extra meaning to it, effectively adding meta data. This meta data can be used by PowerShell developers to utilize framework instructions when working with an application. 
This type of scenario might come when you’re wanting to map class properties to API queries.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;cm&quot;&gt;&amp;lt;#
    .Notes
        Created: 23/01/2017 
        Author: Luke Griffith

    .Synopsis
        Creates a property attribute that can be mapped to class properties.

    .Description
        apiObject informs the Mapper that this property is a member 
        of the API and should be mapped accordingly.

    .Example
        class Software {
            [apiObject(shouldQuery=$true)]
            [String]$Name   
            ...
    
#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class &lt;/span&gt;apiObject : System.Attribute &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$shouldQuery&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Above we’ve defined the apiObject, inheriting from the System.Attribute class it inherits the required functionality to make this class an attribute. 
Now I can use the class to add metadata to properties.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;k&quot;&gt;class &lt;/span&gt;Software &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;apiObject&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shouldQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Name&lt;/span&gt;

    Software&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;apiMapper]&lt;span class=&quot;nv&quot;&gt;$mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can create a software class, and add the attribute to any property. We can reflect on the property to obtain the named arguments.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Software].GetProperties&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;.Where&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;.Name -eq &lt;span class=&quot;s2&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;function-attributes&quot;&gt;Function attributes&lt;/h1&gt;

&lt;p&gt;These can be added to powershell functions, just like the [CmdletBinding()] class. These can be pulled back from the FunctionInfo object.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# enum for class options&lt;/span&gt;
enum httpMethods &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    GET
    PUT
    POST
    DELETE

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;&amp;lt;#
    .Notes 
    Luke Griffith
    23/01/17

    .Synopsis
    Function attribute that interfaces with WebModule

    .Description
    Can be used to add WebModule properties like route, and method.

#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class &lt;/span&gt;Web : System.Management.Automation.CmdletCommonMetadataAttribute &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 

    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;httpMethods]&lt;span class=&quot;nv&quot;&gt;$Method&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Route&lt;/span&gt;

    Web&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt; 

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;&amp;lt;#
    .Notes 
    Luke Griffith
    23/01/17

    .Synopsis 
    Obtains host data from the config database registry.

    .Description
    Using the ConfigDB module, it queries the registry for the computer name provided.
#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;Get-HostData &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Web&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;api/hosts&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ComputerName&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    Get-ConfigDBItem &lt;span class=&quot;nv&quot;&gt;$ComputerName&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the above example, I’ve coded out a Web function attribute and this can be added to the function much like the CmdletBinding attribute.
In this case, the attributes provide a web framework data around the HTML route for this function to be called at, and what method it takes.&lt;/p&gt;

&lt;p&gt;To obtain this metadata, I just need to get the FunctionInfo.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Get-Command &lt;/span&gt;Get-HostData

&lt;span class=&quot;nv&quot;&gt;$function&lt;/span&gt;.ScriptBlock.Attributes


&lt;span class=&quot;c1&quot;&gt;# Method                  : GET&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Route                   : api/hosts&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# DefaultParameterSetName : &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SupportsShouldProcess   : False&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SupportsPaging          : False&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SupportsTransactions    : False&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ConfirmImpact           : Medium&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# HelpUri                 : &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# RemotingCapability      : PowerShell&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# TypeId                  : Web&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Mon, 23 Jan 2017 22:00:21 +0000</pubDate>
        <link>http://www.lukegriffith.co.uk/posts/2017/01/23/PowerShell-Custom-Attributes.html</link>
        <guid isPermaLink="true">http://www.lukegriffith.co.uk/posts/2017/01/23/PowerShell-Custom-Attributes.html</guid>
        
        <category>powershell</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>PSObjects</title>
        <description>&lt;h1 id=&quot;get-member&quot;&gt;Get-Member&lt;/h1&gt;
&lt;p&gt;Everything in PowerShell returns an object. It may be an object of the  System.String class, it may be an object of the System.Management.Automation.PSDriveInfo class literally everything returned in the shell is an object, with properties, methods and so much more!&lt;/p&gt;

&lt;p&gt;The best way to work out what you’re looking at is the cmdlet Get-Member. Pipe anything to this and it will return not only what type of object you have but also its members and properties.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/psobj_1.gif&quot; alt=&quot;get-member&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Above I’ve piped the command Get-Process what returns an object of the class  System.Diagnostics.Process, what is a list of running processes on the system . This shows its properties, and methods. One method of this Object is .Kill(), running this method against an objcet of this type would kill the process.&lt;/p&gt;

&lt;h1 id=&quot;objects-through-the-pipeline&quot;&gt;Objects through the Pipeline&lt;/h1&gt;
&lt;p&gt;As I mentioned previously, you can use the pipe to pass objects to another cmdlet, you can also enumerate object in the pipe with Where/ForEach-Object, and within a script block the pipeline object is represented as the variable $_. Passing objects through the pipeline allows you to manipulate them. In the below example, I’ve used the select-object cmdlet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/psobj_2.gif&quot; alt=&quot;select-object&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So in this case, the get-service cmdlet is being presented to the shell as an object then I’m selecting the ServiceName and the first object in the collection (This is the first object in the array of objects returned from get-service).&lt;/p&gt;

&lt;p&gt;As you can see with the Select-Object cmdlet, you need to specify the property to view, you can add multiple ones by adding a comma or you can try and add a wildstar * and it will return every single property the object has. In most cases, there are too many and a lot of them are unnecessary so the shell redacts them but a lot of them can be helpful in specific cases. This is controlled through cmdlet XML formatting.&lt;/p&gt;

&lt;h1 id=&quot;hashtables&quot;&gt;HashTables&lt;/h1&gt;
&lt;p&gt;Hashtables are a type of object in PowerShell used to move, store and transform data. Cmdlets of similar names, like Get-Service and Stop-Service accept the same parameters some of these can be accessed via the pipeline, so piping Get-Service to Stop-Service it automatically knows that the Name passed from Get-Service will be used was the Name for Stop-Service. In some cases, the pipeline parameters the cmdlet accepts will be different from the object that you’re piping, The below example shows importing a CSV file of stopped services, and transforming the name to be piped into Get-Service, then eventually Stop-Service. In this case a hashtable would need to be used on the Select-Object cmdlet to change the name of the property. Below I’ve changed ServiceName to Name, I can tell the Name property takes input by pipeline as I’ve checked it using the Get-Help cmdlet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/psobj_3.gif&quot; alt=&quot;transformexample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Creating a longer pipe, using the ` charater to indicate to the shell to ignore the line break.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/psobj_4.gif&quot; alt=&quot;pipeline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hashtables are also used as key value stores, for instance you can store strings, numbers and any object using a key, then obtain it from the hashtable using the key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/psobj_5.gif&quot; alt=&quot;hashtable&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;formatting&quot;&gt;Formatting&lt;/h1&gt;
&lt;p&gt;Each cmdlet and PowerShell object generally gets formatted in different ways depending on what information is returned. You can bypass this and manually tell the Shell to format it in your desired way.&lt;/p&gt;

&lt;p&gt;Format-List and Format-Table can be used for this, see the below example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/psobj_6.gif&quot; alt=&quot;format-table&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;methods-and-properties&quot;&gt;Methods and Properties&lt;/h1&gt;
&lt;p&gt;In this example, I will run the .Kill() method against Notepad.exe, in a practical example I would pipe the output of my first command to Stop-Process but I want to show how PowerShell Methods and Properties can be used.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/psobj_7.gif&quot; alt=&quot;methods&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve done a few new things in the above example, first off I’ve used the Where-Object cmdlet, this cmdlet give you the ability to map an expression to each of the pipeline objects, in case the cmdlet does not support filtering (Always best to filter as far left of the pipe as possible). The syntax is a bit different and requires script blocks { } to process the object. In the above example i’ve expressed where the objects ProcessName is equal to Notepad it will keep the object, and the rest will be thrown away. The $_ represents the object in the pipeline, so the PowerShell object passed through from Get-Process is represented as $_ the .ProcessName is a member property of the Get-Process object, this can be found using the Get-Member cmdlet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/psobj_8.gif&quot; alt=&quot;where-object&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will also notice the $notepadProcess syntax I used. This stores the object of the get-process cmdlet to the variable $notepadProcess, this gives me the ability to come back to it later, or more easily run methods on the object like the .Kill method. All variables in PowerShell start with a dollar sign $ and you can set anything to them, an integer, string, powershell object… anything.&lt;/p&gt;

&lt;p&gt;You can also pull back individual properties as well as methods.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/psobj_9.gif&quot; alt=&quot;where-object&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;creating-objects&quot;&gt;Creating Objects&lt;/h1&gt;
&lt;p&gt;Objects can be created and returned to the shell by using a type accelerator, and a hashtable or dictionary object. Say I made a query and want to take some properties and add them to my own, You can store the output and define them In your own object to be used later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;cm&quot;&gt;&amp;lt;#
.notes
Script gives an example of how to generate a PowerShell object from script level variables
 
.output
ComputerName 10.0.0.20
------------ ---------
HostA        10.0.0.20
 
#&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;nv&quot;&gt;$ComputerName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HostA&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$IPAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;10.0.0.20&quot;&lt;/span&gt;
 
&lt;span class=&quot;nv&quot;&gt;$object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pscustomobject]@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

ComputerName &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HostA&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$IPAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;10.0.0.20&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;nv&quot;&gt;$object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;psobject-property&quot;&gt;.PsObject property&lt;/h1&gt;
&lt;p&gt;The .PsObject property contains meta data about the object its self. Any object can be accessed directly on this property, and it exposes members, properties, methods and details about its base object. Type names are also included.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/psobj_9.gif&quot; alt=&quot;psobject&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Nov 2016 22:00:21 +0000</pubDate>
        <link>http://www.lukegriffith.co.uk/posts/2016/11/28/PowerShell-PSObjects.html</link>
        <guid isPermaLink="true">http://www.lukegriffith.co.uk/posts/2016/11/28/PowerShell-PSObjects.html</guid>
        
        <category>powershell</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>PowerShell, Cmdlets &amp; Help</title>
        <description>&lt;h1 id=&quot;what-is-powershell&quot;&gt;What is PowerShell?&lt;/h1&gt;

&lt;p&gt;PowerShell is an Automation and Management Framework intended to replace Windows Command Line and VBScript, the Monad Manifesto originally created by Jeffrey Snowver what laid the road map for PowerShell wanted to bring together, a consistent set of tools that can aid in windows (and now cross-platform) infrastructure and application automation that can help ease not only management of the entire environment but to also allow for a quicker pace of development of automation and tools. Along with this, the framework Desire State Configuration first shown off in version 4 brings the ability for true automation for Windows, allowing for tools similar to Puppet, Chef and Ansible to deploy Windows environments with the same ease and extensibility that UNIX and Linux operating systems have had for years.&lt;/p&gt;

&lt;p&gt;The old style of Windows management is changing, in the near future configuration of the windows OS will come down to intelligently modifying text files. Although this is a game changers for most this is the next stage of OS management and is required as more of our core systems migrate to the cloud.&lt;/p&gt;

&lt;h1 id=&quot;where-to-start&quot;&gt;Where to start?&lt;/h1&gt;

&lt;h2 id=&quot;powershellexe-or-powershelliseexe&quot;&gt;Powershell.exe or Powershell_ISE.exe?&lt;/h2&gt;
&lt;p&gt;The ISE (Integrated Scripting Environment) is a tool provided by microsoft it is a full development environment for powershell scripts. This tool highlights syntax issues, and can guide you on creating scripts. This can be launched by typing ISE into powershell. 
 
Powershell.exe - This is the core shell, the application that takes what input you’ve given it and runs back to the server/workstation to obtain the information, or runs the configuration cmdlets you’ve sent. Most configuration commands do require the shell to be run in Administrative mode, the mode can be determined by the window title (it will start with Administrator if it is).&lt;/p&gt;

&lt;h2 id=&quot;what-version-of-powershell-am-i-running&quot;&gt;What version of PowerShell am I running?&lt;/h2&gt;
&lt;p&gt;Theres a built in environment variable with powershell called $PSversiontable. This will return the version of powershell thats currently installed on your system. I recommend upgrading to the most current up to date stable version PowerShell V4. There is a beta of V5 for windows 8 and 8.1 but this is still unstable. Upgrading the Windows Management Framework will upgrade powershell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/clip_image002.gif&quot; alt=&quot;PSVersion&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cmdlets--help-system&quot;&gt;Cmdlets / help system&lt;/h1&gt;

&lt;h3 id=&quot;cmdlets&quot;&gt;Cmdlets&lt;/h3&gt;

&lt;p&gt;Powershell runs on Cmdlets, and all Microsoft products (and as a recommended standard so do its partners) uses verb-and-noun pairs to name them. This is why you will see things like.
 &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Get-Service
Stop-Service
Start-Service
Set-Service&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; 
This convention makes understanding what PowerShell cmdlets do so easy, and from a glance you can probably guess what the above 4 all do. Along with making it easy to understand what they do, it also makes it easy to search for related cmdlets and finding out what ones get information, or make changes to the system.
### Anatomy of the a cmdlet
The below example shows a full cmdlet with parameters and parameter values 
&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/clip_image003.gif&quot; alt=&quot;Anatomty&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The position of the parameters are important, and generally with the first parameters you can drop the parameter name, so in this case Get-EventLog Security would guy also work.&lt;/p&gt;

&lt;h3 id=&quot;finding-cmdlets&quot;&gt;Finding Cmdlets&lt;/h3&gt;
&lt;p&gt;PoSH comes with another invaluable command that I use daily, get-command. The command on its own pulls back a full list of loaded commands, but if you interrogate the help documentation you can use the cmdlets parameters to filter down the results.
&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/clip_image004.gif&quot; alt=&quot;Anatomty&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above example, pulls back a cmdlet we’ve already seen get-service, but the -verb parameter can be used on its own to pull back a full list of get, set, start, or any other verb that PowerShell uses. You can also use wildcards in your search as in the below example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/clip_image006.gif&quot; alt=&quot;Get-Command&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-help-system&quot;&gt;The Help System&lt;/h3&gt;

&lt;p&gt;Powershells help system is extensive, and unlike other windows products the help system is separate to the core application what means its updated all the time by Microsoft and can be updated live without patches or upgrading occurring.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;Update-Help&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/clip_image006.gif&quot; alt=&quot;Update-Help&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Running the Update-Help cmdlet, will download the latest version of help documentation from the web, the green progress bar will appear and pause the shell until the operation has completed. 
 &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Get-Help&lt;/span&gt; &amp;lt;Cmdlet&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using the help system is simple, the cmdlet you need more information on, just type get-help with the cmdlet and it will pull back the documentation. If you’re unable or unwilling to update the help, for whatever reason, you can use a -online switch that launches the default web browser to the relevant msdn page that contains the same information.
 
There are also other switches, like -examples, and -full. Examples presents samples of the cmdlet being used, and full gives you the full documentation, parameters and all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.lukegriffith.co.uk/images/psintro/clip_image010.gif&quot; alt=&quot;Update-Help&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The object can look a bit daunting, loads of square brackets and and dashes everywhere but the examples, and documentation it gives out is invaluable and second to none to any other scripting languages I’ve used.&lt;/p&gt;

&lt;h3 id=&quot;alaises&quot;&gt;Alaises&lt;/h3&gt;

&lt;p&gt;As with cmd, and bash PowerShell has the ability to alias commands, you can use the get-alias command to see a full list, or you can use new-alias to create your own. For the base of this document I will not use aliases as its good practice when writing production scripts to use full names, but you can feel free to explore this yourself some examples from my personal shell profile&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;new-alias&lt;/span&gt; -name vim -value &lt;span class=&quot;s2&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rogram Files (x86)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\V&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\v&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;im74&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\v&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;im.exe&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;new-alias&lt;/span&gt; -name wm -value &lt;span class=&quot;s2&quot;&gt;&quot;whatmask.exe&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;new-alias&lt;/span&gt; -name netbrain -value &lt;span class=&quot;s2&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rogram Files (x86)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\N&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;etBrain&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\W&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;orkstation Operator Edition&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\N&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;etBrainWorkbench.exe&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;new-alias&lt;/span&gt; -name RepPro -value &lt;span class=&quot;s2&quot;&gt;&quot;Scr:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cripts&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\R&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;epProWk.ps1&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Other default aliases already configure are gps (get-process) ls/dir/gci (get-childitem)&lt;/p&gt;

</description>
        <pubDate>Sun, 27 Nov 2016 20:00:21 +0000</pubDate>
        <link>http://www.lukegriffith.co.uk/posts/2016/11/27/PowerShell-Cmdlets-Help.html</link>
        <guid isPermaLink="true">http://www.lukegriffith.co.uk/posts/2016/11/27/PowerShell-Cmdlets-Help.html</guid>
        
        <category>powershell</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>PowerShell Introduction Series</title>
        <description>&lt;p&gt;Welcome to my introdution series for PowerShell, I will be releasing a number of posts that will be targeted towards new comers to PowerShell with documentation that I’ve written. Inspired by the Month of Lunches seires.&lt;/p&gt;

&lt;p&gt;Some of this is still targeted for PowerShell v4, and will be updated in time.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lukegriffith.co.uk/documentation/PowerShell-Cmdlets-Help/&quot;&gt;Powershell, Cmdlets and Help&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lukegriffith.co.uk/documentation/PowerShell-PSObjects/&quot;&gt;PSObjects&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 27 Nov 2016 19:00:21 +0000</pubDate>
        <link>http://www.lukegriffith.co.uk/posts/2016/11/27/PowerShell-Introduction.html</link>
        <guid isPermaLink="true">http://www.lukegriffith.co.uk/posts/2016/11/27/PowerShell-Introduction.html</guid>
        
        <category>powershell</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Cross Platform PowerShell Testing.</title>
        <description>&lt;h1 id=&quot;the-problems&quot;&gt;The Problems.&lt;/h1&gt;
&lt;p&gt;So, my home rig is a custom build desktop PC running windows 10 but before i discovered PowerShell i was trying to learn Python and UNIX systems so i bought a mac and started learning BASH. When i got into really into PowerShell development I made the (terrible) decision to install win10 using bootcamp so I could shell all the time. I brought the reliability of Windows with the price tag of a Mac.&lt;/p&gt;

&lt;p&gt;So Bootcamp is a bad idea, the operating system has terrible hardware access and things like battery consumption during sleep made the laptop pretty useless and not very portable. So now we’re on OSx El Capitan. My first problem… How the hell do i develop PowerShell on this bad boy? Ok ok… I’ve got VS Code it has native PowerShell syntax highlighting, but thats not really *nix enough for me, VIM has an extension for PowerShell syntax highlighting - woo, ok so thats installed. Step one I have a colourful editor.&lt;/p&gt;

&lt;p&gt;Second problem. Although PowerShell is rumoured to be going open source and maybe one day we’ll see a linux port but currently… I can’t really run PowerShell and Pester on Mac, so what can I do?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lukemgriffith/TestLauncher&quot;&gt;Github Project Link&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-solution&quot;&gt;The Solution&lt;/h1&gt;

&lt;p&gt;So, first off I needed a hypervisor to run windows on and the only one I know personally thats cross platforms is Oracles VirtualBox - the command line interface is a bit clunky but VBoxManage appears to work OK, i can start VM’s i can query states - for what I need this should do.&lt;/p&gt;

&lt;p&gt;The operating system, so far I’ve not really played with server 2016, so I grabbed the iso from MSDN and installed it unfortunately I haven’t automated the setup of the VM but potentially this could come later. After installing the Operating System I needed to setup a shared machine folder so I can have a share between my Mac and the windows server, using the shared folders in virtual box I was able to setup my TestingFramework share.&lt;/p&gt;

&lt;p&gt;Next I configured winlogon to automatically login an Administrative user setting the default username, default password and changing the shell to execute PowerShell.exe natively on boot, the script i used to alter these settings can be found here &lt;a href=&quot;https://github.com/lukemgriffith/TestLauncher/blob/master/posh/TestUser.ps1&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So now when the VM starts it immediately logs in and starts PowerShell. Now I need to initiate my testing framework to execute what I need and extract the results. PowerShell natively loads $profile when it starts so I can leverage this to start my workflow.&lt;/p&gt;

&lt;h2 id=&quot;powershell-scripts&quot;&gt;Powershell Scripts&lt;/h2&gt;
&lt;p&gt;The below scripts control the automation for when the Windows Server starts, it controls what executes, in this case Pester tests outputs the results to a shared folder then shuts the server down capturing a transcript of the whole process. See below for details.&lt;/p&gt;

&lt;h1 id=&quot;profileps1httpsgithubcomlukemgriffithtestlauncherblobmasterposhprofileps1&quot;&gt;&lt;a href=&quot;https://github.com/lukemgriffith/TestLauncher/blob/master/posh/profile.ps1&quot;&gt;Profile.ps1&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;The PowerShell profile loads from the users WindowsPowerShell folder located in the users documents folder and can be found via the variable $PROFILE, as the profile I will be developing will be located in the TestingFramework shared folder, I first need to deploy a basic copy that checks for updates from the share. For this i use a function called CheckProfileUpdate this obtains a file hash of both the TestingFolder profile and the local profile and if they differ the local will be over written and the machine restarted.&lt;/p&gt;

&lt;p&gt;Following this i initiate a transcript thats logged out, and then import dependant modules pester and psake from the modules folder in TestingFramework. After that step i initiate the launch.ps1 script located in TestingFramework.&lt;/p&gt;

&lt;h1 id=&quot;launchps1httpsgithubcomlukemgriffithtestlauncherblobmasterposhlaunchps1&quot;&gt;&lt;a href=&quot;https://github.com/lukemgriffith/TestLauncher/blob/master/posh/launch.ps1&quot;&gt;Launch.ps1&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;This script at the moment is relatively simple - It sets the location of the shell to the Development Modules folder and starts Invoke-Pester, with the NUnitOutput exported to the TestingFramework. This script it tasked with executing your tests, it might need to import modules, it can invoke a psake task list but for now its a simple invoke-pester.&lt;/p&gt;

&lt;h1 id=&quot;shutdownps1httpsgithubcomlukemgriffithtestlauncherblobmasterposhshutdownps1&quot;&gt;&lt;a href=&quot;https://github.com/lukemgriffith/TestLauncher/blob/master/posh/shutdown.ps1&quot;&gt;Shutdown.ps1&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Very simple, as it states it shuts the server down after testing is completed.&lt;/p&gt;

&lt;h2 id=&quot;bash-scripts&quot;&gt;BASH scripts&lt;/h2&gt;

&lt;h1 id=&quot;startvmshhttpsgithubcomlukemgriffithtestlauncherblobmasterbashstartvmsh&quot;&gt;&lt;a href=&quot;https://github.com/lukemgriffith/TestLauncher/blob/master/bash/startvm.sh&quot;&gt;Startvm.sh&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;This script probably took me the most time and took a little bit of Google Foo to completed. This is actually my first bash script and I’m rather proud of it. Very simply it uses VBoxManage to start the windows server headlessly, as the previous parts have stated the VM from boot it will execute PowerShell and start the scripted process and end with turning the server back off after completing the testing.&lt;/p&gt;

&lt;p&gt;While the windows server is performing its testing process, i have the shell script enter a wait loop and it queries VBoxManage to check the state of the VM, once it sees its turned off it ends the loop and launches the less command on the recent transcript. This allows me to jump straight into the results of my tests following the execution and if any issues occurred during the run.&lt;/p&gt;

&lt;h2 id=&quot;what-this-gives-me&quot;&gt;What this gives me&lt;/h2&gt;

&lt;p&gt;So, although I’m lacking intellisense this gives me a fairly easy way to start pester tests of my modules and run integration testing on the windows VM. By running “sh startvm.sh” it launches my testing suite that I can setup in OSx and test end to end outputting the NUnit output and allowing me access to the transcript. At the moment this is the best I can come up with besides working directly inside a virtual machine (Or buying a windows laptop :P) but it was also pretty fun to put together and learning a bit of bash is never harmful.&lt;/p&gt;

</description>
        <pubDate>Sun, 31 Jul 2016 17:00:21 +0100</pubDate>
        <link>http://www.lukegriffith.co.uk/posts/2016/07/31/Cross-Platform-PowerShell-Testing.html</link>
        <guid isPermaLink="true">http://www.lukegriffith.co.uk/posts/2016/07/31/Cross-Platform-PowerShell-Testing.html</guid>
        
        <category>powershell</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Inheritance in PowerShell DSC resources.</title>
        <description>&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Last week i made a blog post about the DSC framework and its limitations, I can now withdraw that statement. for me it was a learning experience and taught me to always test on multiple versions and operating systems before you come to a theory.&lt;/p&gt;

&lt;p&gt;This post is to show an example of how to use the DSC framework in a better way, to hopefully reduce code smells and reduce repetitive code use, keeping close to agile principles. In the WMF 4 way of writing resources, many times i came across functions that I was using time and time again in different modules that had DSC resources.&lt;/p&gt;

&lt;p&gt;Eventually I settled for a helper module that my resources depended on but due to the limitations of the WMF4 LCM and pull server - having a requirement of a module that was not already located on the box caused issues for the download manager as it could not validate the modules. After a number of hacks and effectively bending Powershell and DSC out of shape, I managed to get my helper module and use it as a central store for useful functions to be used across a number of DSC resources.&lt;/p&gt;

&lt;p&gt;Now on WMF 5, utilizing class based resources and inheritance I believe there is a better way to achieve this.&lt;/p&gt;

&lt;h1 id=&quot;dsc-inheritance&quot;&gt;DSC Inheritance&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lukemgriffith/DSCInheritance&quot;&gt;GITHUB PROJECT LINK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the above link to the GitHub project, I’ve used this as an example of how inheritance can be achieved in DSC, in this project you have the two Powershell modules&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- Modules 
    |-- Base
        |-- Base.psm1
        |-- Base.psd1
    |-- InheritedResource
        |-- InheritedResource.psm1
        |-- InheritedResource.psd1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Having these modules located in the module path, will export a single DSC resource, InheritedResource and it has the following properties.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;PS &lt;/span&gt;wrk:&lt;span class=&quot;se&quot;&gt;\&amp;gt;&lt;/span&gt; Get-DscResource -Name InheritedResource | % Properties

Name                 PropertyType   IsMandatory Values                     
----                 ------------   ----------- ------                     
Enforce              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;              True &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Always, Controlled, Never&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
Ensure               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;              True &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Absent, Present&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;          
SettingName          &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;              True &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;                         
DependsOn            &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]]&lt;/span&gt;           False &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;                         
PsDscRunAsCredential &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PSCredential]       False &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;                
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you look at the class for InheritedResource, not a lot is going on compared to what you might expect a standard DSC resource to have. A single property $SettingName is declared and made the Key of the resource, yet without a valid Get/Set/Test the resource is still valid and you can compile a mof, Furthermore the properties above Enforce and Ensure are no where to be seen.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;k&quot;&gt;using &lt;/span&gt;Module Base


&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DscResource&lt;span class=&quot;o&quot;&gt;()]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class &lt;/span&gt;InheritedResource : Base
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DSCProperty&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Key&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SettingName&lt;/span&gt; 

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How this is achieved is by inheriting form the base resource (See &lt;strong&gt;InheritedResource : Base&lt;/strong&gt;), this ensures that InheritedResource has all the properties of base, unless they are overwritten by the child class. This allows me to inherit the Get, Set and Test method to effectively abstract away the inner workings of my resource, leaving only superficial settings available in the class.&lt;/p&gt;

&lt;h1 id=&quot;abstract-the-get--set--test&quot;&gt;Abstract the Get / Set / Test&lt;/h1&gt;

&lt;p&gt;First question is why would you want to do this? Well really you wouldn’t in this form, each resource really needs its own implementation of the Get, Set and Test because it needs to implement its own logic to configure what your resource is developed for. Where could this be helpful? well abstracting the implementation of the methods allows you more control over what happens inside the resource - Say for example base looked like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;k&quot;&gt;using &lt;/span&gt;Module Base


&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DscResource&lt;span class=&quot;o&quot;&gt;()]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class &lt;/span&gt;Base
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Enforce&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Void]Set&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nb&quot;&gt;Start&lt;/span&gt;-Logger

        &lt;span class=&quot;nv&quot;&gt;$ShouldRun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Get-EnforcementConfig &lt;span class=&quot;nv&quot;&gt;$Enforce&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ShouldRun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;.xSet&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Void]xSet&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; 

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this implementation of the base resource, I would be able to override the xSet method on the inherited class and any Set that was triggered by the DSC framework would always go through this method before executing the inherited resource set.&lt;/p&gt;

&lt;p&gt;The benefits this gives allows you to have a single point to trap logs, check if a set should run and other business logic that your configuration workflows might need, in this case the Inherited Resource might look something like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;k&quot;&gt;class &lt;/span&gt;InheritedResource : Base
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DSCProperty&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Key&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SettingName&lt;/span&gt; 

    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Void]xSet&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 

        &lt;span class=&quot;nb&quot;&gt;Set&lt;/span&gt;-SettingName &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;.SettingName

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So the above inheritedResource Set method that DSC executes would first hit the Base Set method, execute the central logic defined in this resource, then pass it through to the overridden xSet method and execute the individual resource logic.&lt;/p&gt;

&lt;p&gt;This method alone, can cut down a lot of repetitive code if you need to engage a logger, or send notifications to a monitoring tool that a configuration has started converging this is where you would want to do it and it would stop you from littering your individual resources with the exact same code. This approach makes your implementation neater, reduces code re-usage but also allows you to have a central place to change the workflow if required.&lt;/p&gt;

&lt;h1 id=&quot;general-methods&quot;&gt;General Methods&lt;/h1&gt;

&lt;p&gt;The second benefit to this, is the ability to have shared methods defined on the base class that can be used across all resources. Take for example a method called $this.WriteLog().&lt;/p&gt;

&lt;p&gt;Potentially WriteLog() might send a line to a log file on disk, or send an SNMP trap to an external monitor - the implementation of this code when defined on the base resource is only made once and can be used across all resources that utilize the Base class, and similar to the shared Set method, you have a central place to change this - in case a new monitoring system has been brought into production it reduces the need to change code to a single point in the base class.&lt;/p&gt;

&lt;p&gt;The actual implementation of the base class for this project can be found &lt;a href=&quot;https://github.com/lukemgriffith/DSCInheritance/blob/master/Modules/Base/Base.psm1&quot;&gt;here&lt;/a&gt; and you can see I’ve already defined a number of default methods. Ideally I will look to expand this to include a number of useful methods that can be used across the board for all resources so things like Logging and checking restart times can be moved to this.&lt;/p&gt;

&lt;p&gt;Classes in PowerShell will be the start of a lot of great things, and this for me is one of the huge benefits on top of class based resources alone.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jun 2016 20:00:21 +0100</pubDate>
        <link>http://www.lukegriffith.co.uk/posts/2016/06/16/DSC-Inheritance.html</link>
        <guid isPermaLink="true">http://www.lukegriffith.co.uk/posts/2016/06/16/DSC-Inheritance.html</guid>
        
        <category>powershell</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>My new Jekyll blog.</title>
        <description>&lt;p&gt;After a short hiatus I’m back, with a new platform to host my technology blog, I’ve moved to a Jekyll backed static page project, what is simple to deploy and has me very happy with the automation potential around the deployment process.&lt;/p&gt;

&lt;p&gt;Its enabled me to reduce the cost of my hosting to mere pennies while still having full control of all aspects of its hosting environment.&lt;/p&gt;

&lt;h1 id=&quot;install&quot;&gt;Install&lt;/h1&gt;

&lt;p&gt;Installing the required bits to my development environment was two commands using &lt;a href=&quot;https://chocolatey.org/&quot;&gt;chocolatey&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;choco install ruby -y
gem install jekyll&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Chocolately installs ruby what inturn allows me to install Jekyll what is a ruby gem.&lt;/p&gt;

&lt;p&gt;I can create a new blank Jekyll site by running the following after installing Jekyll.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;jekyll create&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and I can host the site using the Jekyll webserver with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;jekyll serve &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;configuration-and-posts&quot;&gt;configuration and posts&lt;/h1&gt;

&lt;p&gt;The _config.yml file allows you to set specific site variables, like description, title and input your github and Twitter usernames. Making a new blog post is simple, create a new markdown file in the _posts folder with the filename representative of the location, for example www.lukemgriffith.co.uk/2016/04/27/myfirstblogpost.HTML would be a file called 2016-04-27-myfirstblogpost.markdown.&lt;/p&gt;

&lt;p&gt;More to come on how I’ve automated my build an release process, this is more of a hello I’m here again, with a new site type post.&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Apr 2016 17:00:21 +0100</pubDate>
        <link>http://www.lukegriffith.co.uk/posts/2016/04/23/My-New-Jekyll-Blog.html</link>
        <guid isPermaLink="true">http://www.lukegriffith.co.uk/posts/2016/04/23/My-New-Jekyll-Blog.html</guid>
        
        <category>blogging</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
